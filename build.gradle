plugins {
    id 'fabric-loom'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.mod_id
}

java {
    withSourcesJar()
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // In this case, we are only listing our own maven repository to publish to.
    // You may also want to add `maven { url = "https://maven.fabricmc.net/" }` for example.
    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    // To change the versions of dependencies, see the gradle.properties file.
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("net.fabricmc:yarn:${project.minecraft_version}+${project.yarn_mappings}:v2")
    modImplementation("net.fabricmc:fabric-loader:${project.fabric_loader_version}")

    // Fabric API.
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")
}

processResources {
    inputs.property("version", project.version)

    filesMatching("fabric.mod.json") {
        expand("version": project.version)
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

jar {
    from("LICENSE") {
        rename { "LICENSE_${base.archivesName}" }
    }
}

// Configure the sources jar to be empty as we don't have any sources (yet) in this example project.
sourcesJar {
    archiveClassifier = "dev-sources"
}

// Configure the mod jar to use the `remap` task.
remapJar {
    input.set(jar.archiveFile)
    dependsOn(jar)
}

// Configure the `namedElements` task to use the `remapJar` task to provide the mod jar.
// In Loom 1.0, this task is not created by default if it does not exist, so it must be added.
// `namedElements` is an outgoing configuration, used for publishing to maven for example.
configurations {
    namedElements {
        outgoing.artifact(remapJar) {
            builtBy remapJar
        }
    }
}

// For publishing to maven, you can use the `maven-publish` plugin.
publish {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for more information.
}
